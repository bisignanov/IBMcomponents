import{p,j as e,z as de,A as pe,B as R,I as q}from"./settings-BiUEFdm2.js";import{R as h,r as G}from"./index-BwDkhjyp.js";import{a as $}from"./chunk-MZXVCX43-CM0pFb8Z.js";import{S as he}from"./StoryDocsPage-BuwgUq5r.js";import{P as t}from"./index-Dk74W0Oi.js";import{c as d,C as ue,e as me}from"./deprecate-D9ms-jbM.js";import{g as _}from"./devtools-BPcQvzXy.js";import{u as fe}from"./uuidv4-BQrI85uz.js";import{C as be}from"./Carousel-DpP2qXaV.js";import{C as ge,a as xe}from"./bucket-1-Bggqt_K0.js";import{c as ye}from"./bucket-8-61DsWji_.js";import{L as je}from"./Link-CxgVlihf.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-CJvxHwuA.js";import"./events-Bq7WR1mU.js";import"./index-BONylQH5.js";import"./v4-CQkTLCs1.js";import"./index-CDYzkStP.js";import"./iframe-j3s5A4v9.js";import"../sb-preview/runtime.js";import"./extends-CCbyfPlC.js";import"./index-C2eUe6cH.js";import"./index-BjQFKvNH.js";import"./isSymbol-BZYRlrjc.js";import"./index-DrFu-skq.js";import"./story-helper-YTYnELA9.js";import"./tslib.es6-B4_xh3D5.js";const o=`${p.prefix}--guidebanner`,L="Guidebanner",u={collapsible:!1,withLeftGutter:!1,closeIconDescription:"Close",collapseButtonLabel:"Read less",expandButtonLabel:"Read more",nextIconDescription:"Next",previousIconDescription:"Back"};let m=h.forwardRef(({children:i,className:a,collapsible:n=u.collapsible,onClose:r,withLeftGutter:c=u.withLeftGutter,closeIconDescription:l=u.closeIconDescription,collapseButtonLabel:C=u.collapseButtonLabel,expandButtonLabel:Z=u.expandButtonLabel,nextIconDescription:ee=u.nextIconDescription,previousIconDescription:te=u.previousIconDescription,title:ne,...se},oe)=>{const U=G.useRef(null),ie=G.useRef(null),[k,ae]=G.useState(0),[A,re]=G.useState(!1),[j,ce]=G.useState(!!n),le=()=>{ce(N=>!N)},T=`${fe()}--carousel-content-id`;return e.jsxs("div",{...se,"aria-owns":j?void 0:T,className:d(o,a,n&&`${o}__collapsible`,j&&`${o}__collapsible-collapsed`,c&&`${o}__with-left-gutter`),ref:oe,..._(L),children:[e.jsx(ye,{size:20,className:`${o}__icon-idea`}),e.jsx("div",{className:`${o}__title`,children:ne}),e.jsx(be,{id:T,className:`${o}__carousel`,fadedEdgeColor:{left:de,right:pe},ref:U,onChangeIsScrollable:N=>{re(N)},onScroll:N=>{ae(N)},children:i}),e.jsxs("div",{className:d([n||A?`${o}__navigation`:null]),children:[n&&e.jsx(R,{kind:"ghost",size:"md",className:`${o}__toggle-button`,onClick:le,ref:ie,"aria-controls":j?void 0:T,"aria-expanded":!j,children:j?Z:C}),A&&e.jsxs(e.Fragment,{children:[e.jsx("span",{className:d(`${o}__back-button`,[k===0?`${o}__back-button--disabled`:null]),children:e.jsx(q,{align:"top",disabled:k===0,kind:"ghost",label:te,onClick:()=>{U.current.scrollPrev()},size:"md",children:e.jsx(ge,{size:16})})}),e.jsx("span",{className:d(`${o}__next-button`,[k===1?`${o}__next-button--disabled`:null]),children:e.jsx(q,{align:"top-right",disabled:k===1,kind:"ghost",label:ee,onClick:()=>{U.current.scrollNext()},size:"md",children:e.jsx(xe,{size:16})})})]})]}),r&&e.jsx("span",{className:`${o}__close-button`,children:e.jsx(q,{align:"bottom-right",kind:"ghost",label:l,onClick:r,size:"md",children:e.jsx(ue,{size:16})})})]})});m=p.checkComponentEnabled(m,L);m.displayName=L;m.propTypes={children:(i,a)=>{let n;const r=i[a];return r||(n=new Error("`Guidebanner` requires one or more children of type `GuidebannerElement`.")),h.Children.forEach(r,c=>{var l,C;c.type.displayName!=="GuidebannerElement"&&(n=new Error(`\`Guidebanner\` only accepts children of type \`GuidebannerElement\`, found \`${((l=c.type)==null?void 0:l.displayName)||((C=c.type)==null?void 0:C.name)||c.type}\` instead.`))}),n},className:t.string,closeIconDescription:t.string,collapseButtonLabel:t.string,collapsible:t.bool,expandButtonLabel:t.string,nextIconDescription:t.string,onClose:t.func,previousIconDescription:t.string,title:t.string.isRequired,withLeftGutter:t.bool};m.__docgenInfo={description:`The guide banner sits at the top of a page, or page-level tab,
to introduce foundational concepts related to the page's content.`,methods:[],displayName:"Guidebanner",props:{collapsible:{defaultValue:{value:"false",computed:!1},description:`When true, the Guidebanner will initialize in a collapsed state,
showing the title and the Expand button.

When expanded, it will show the GuidebannerElement child components and the Collapse button.`,type:{name:"bool"},required:!1},withLeftGutter:{defaultValue:{value:"false",computed:!1},description:`If true, insert 1 rem of "space" on the left of the component.
This will allow the component's content to line up with other
content on the page under special circumstances.`,type:{name:"bool"},required:!1},closeIconDescription:{defaultValue:{value:"'Close'",computed:!1},description:"Tooltip text and aria label for the Close button icon.",type:{name:"string"},required:!1},collapseButtonLabel:{defaultValue:{value:"'Read less'",computed:!1},description:"Text label for the Collapse button.",type:{name:"string"},required:!1},expandButtonLabel:{defaultValue:{value:"'Read more'",computed:!1},description:"Text label for the Expand button.",type:{name:"string"},required:!1},nextIconDescription:{defaultValue:{value:"'Next'",computed:!1},description:"Tooltip text and aria label for the Next button icon.",type:{name:"string"},required:!1},previousIconDescription:{defaultValue:{value:"'Back'",computed:!1},description:"Tooltip text and aria label for the Back button icon.",type:{name:"string"},required:!1},children:{description:`Provide the contents of the Guidebanner.
One or more GuidebannerElement components are required.`,type:{name:"custom",raw:`(props, propName) => {
  let error;
  const prop = props[propName];
  if (!prop) {
    error = new Error(
      '\`Guidebanner\` requires one or more children of type \`GuidebannerElement\`.'
    );
  }
  React.Children.forEach(prop, (child) => {
    if (child.type.displayName !== 'GuidebannerElement') {
      // If child element is not \`GuidebannerElement\`, then show:
      // Carbon Products component's \`displayName\` (child.type.displayName) or
      // React component's \`name\` (child.type.name) or
      // HTML element's tag name (child.type).
      error = new Error(
        \`\\\`Guidebanner\\\` only accepts children of type \\\`GuidebannerElement\\\`, found \\\`\${
          child.type?.displayName || child.type?.name || child.type
        }\\\` instead.\`
      );
    }
  });
  return error;
}`},required:!1},className:{description:"Provide an optional class to be applied to the containing node.",type:{name:"string"},required:!1},onClose:{description:`If defined, a Close button will render in the top-right corner and a
callback function will be triggered when button is clicked.`,type:{name:"func"},required:!1},title:{description:"Title text.",type:{name:"string"},required:!0}}};const v=`${p.prefix}--guidebanner__element`,B="GuidebannerElement";let s=h.forwardRef(({button:i,className:a,description:n,title:r,...c},l)=>e.jsxs("div",{...c,className:d(v,a),ref:l,..._(B),children:[r&&e.jsx("h2",{className:`${v}-title`,children:r}),n&&e.jsx("p",{className:`${v}-content`,children:n}),i&&e.jsx("div",{className:`${v}-buttons`,children:i})]}));s=p.checkComponentEnabled(s,B);s.displayName=B;s.propTypes={button:t.node,className:t.string,description:t.oneOfType([t.string,t.node]).isRequired,title:t.string};s.__docgenInfo={description:`The GuidebannerElement is a required child component of the Guidebanner,
and acts as a container for a CarouselItem.`,methods:[],displayName:"GuidebannerElement",props:{button:{description:`An optional button can be rendered below the description.
This can be a link, button, Coachmark button, etc.`,type:{name:"node"},required:!1},className:{description:"Provide an optional class to be applied to the containing node.",type:{name:"string"},required:!1},description:{description:"The description of the element.",type:{name:"union",value:[{name:"string"},{name:"node"}]},required:!0},title:{description:"The title of the element.",type:{name:"string"},required:!1}}};const V=`${p.prefix}--guidebanner__element-button`,E="GuidebannerElementButton",Ne={iconDescription:"Crossroads"};let f=h.forwardRef(({children:i,className:a,iconDescription:n=Ne.iconDescription,type:r,...c},l)=>r==="primary"?e.jsx(R,{...c,className:d(V,a),iconDescription:n,kind:"tertiary",ref:l,renderIcon:()=>e.jsx(me,{size:16}),role:"button",size:"md",..._(E),children:i}):e.jsx(R,{...c,className:d(V,a),kind:"ghost",role:"button",size:"md",..._(E),children:i}));f=p.checkComponentEnabled(f,E);f.displayName=E;f.propTypes={children:t.node.isRequired,className:t.string,type:t.string};f.__docgenInfo={description:"One of two buttons styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementButton",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}},iconDescription:{required:!1,tsType:{name:"string"},description:"Provide a description for the icon.",defaultValue:{value:"'Crossroads'",computed:!1}},type:{required:!1,tsType:{name:"string"},description:`If type is "primary", then return a tertiary button with the "crossroads" icon,
else return a ghost button.`,type:{name:"string"}}}};const Ge=`${p.prefix}--guidebanner__element-link`,D="GuidebannerElementLink";let y=h.forwardRef(({children:i,className:a,...n},r)=>e.jsx(je,{...n,className:d(Ge,a),kind:"ghost",ref:r,role:"link",size:"md",..._(D),children:i}));y=p.checkComponentEnabled(y,D);y.displayName=D;y.propTypes={children:t.node.isRequired,className:t.string};y.__docgenInfo={description:"A link styled specifically for the GuidebannerElement.",methods:[],displayName:"GuidebannerElementLink",props:{children:{required:!0,tsType:{name:"ReactNode"},description:"Provide the contents of the GuidebannerElementLink.",type:{name:"node"}},className:{required:!1,tsType:{name:"string"},description:"Provide an optional class to be applied to the containing node.",type:{name:"string"}}}};const _e="#storybook-root{overflow-x:hidden}.non-linear-reading-stories__viewport{margin:0}",Y=()=>e.jsx(he,{blocks:[{story:b},{story:g},{story:x}]});Y.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const we="guidebanner-stories",Ye={title:"IBM Products/Onboarding/Guidebanner",component:m,tags:["autodocs"],parameters:{styles:_e,layout:"fullscreen",docs:{page:Y}},argTypes:{children:{table:{disable:!0}},theme:{table:{disable:!0}}}},P={onClose:()=>$("onClose()")(),title:"Page-related heading that can stand on its own",withLeftGutter:!1},S=()=>e.jsx(f,{type:"primary",onClick:()=>{$('GuidebannerElementButton.onClick() (type="primary")')()},children:"Show Me"}),I=()=>e.jsx(f,{onClick:()=>{$("GuidebannerElementButton.onClick()")()},children:"Click me"}),w=()=>e.jsx(y,{href:"https://www.ibm.com",target:"_blank",onClick:()=>{$("GuidebannerElementLink.onClick()")()},children:"Learn more"}),z=({children:i,...a})=>{const n=i.props.children;return e.jsx("div",{className:`${we}__viewport`,children:e.jsx(m,{...a,children:n})})},b=z.bind({});b.args={...P,collapsible:!0,children:e.jsxs(h.Fragment,{children:[e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context. Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(S,{})}),e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context. Use-case specific content related to the heading that explains the concept or adds context. Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(I,{})}),e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(I,{})}),e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context. Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(w,{})}),e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(w,{})})]})};const g=z.bind({});g.args={...P,children:e.jsxs(h.Fragment,{children:[e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context. Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(S,{})}),e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context. Use-case specific content related to the heading that explains the concept or adds context. Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(I,{})}),e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(I,{})}),e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context. Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(w,{})}),e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(w,{})})]})};const x=z.bind({});x.args={...P,children:e.jsxs(h.Fragment,{children:[e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context. Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(S,{})}),e.jsx(s,{title:"Use-case specific heading",description:"Use-case specific content related to the heading that explains the concept or adds context.",button:e.jsx(w,{})})]})};var F,O,J;b.parameters={...b.parameters,docs:{...(F=b.parameters)==null?void 0:F.docs,source:{originalSource:`({
  children,
  ...rest
}) => {
  // Normally GuidebannerElement are listed directly as children of Guidebanner,
  // but as a story we have to wrap the JSX in a React.Fragment.
  // To feed them here, we point to the list of GuidebannerElements directly.
  const childArray = children.props.children;
  return <div className={\`\${storyClass}__viewport\`}>
      <Guidebanner {...rest}>{childArray}</Guidebanner>
    </div>;
}`,...(J=(O=b.parameters)==null?void 0:O.docs)==null?void 0:J.source}}};var M,X,W;g.parameters={...g.parameters,docs:{...(M=g.parameters)==null?void 0:M.docs,source:{originalSource:`({
  children,
  ...rest
}) => {
  // Normally GuidebannerElement are listed directly as children of Guidebanner,
  // but as a story we have to wrap the JSX in a React.Fragment.
  // To feed them here, we point to the list of GuidebannerElements directly.
  const childArray = children.props.children;
  return <div className={\`\${storyClass}__viewport\`}>
      <Guidebanner {...rest}>{childArray}</Guidebanner>
    </div>;
}`,...(W=(X=g.parameters)==null?void 0:X.docs)==null?void 0:W.source}}};var H,K,Q;x.parameters={...x.parameters,docs:{...(H=x.parameters)==null?void 0:H.docs,source:{originalSource:`({
  children,
  ...rest
}) => {
  // Normally GuidebannerElement are listed directly as children of Guidebanner,
  // but as a story we have to wrap the JSX in a React.Fragment.
  // To feed them here, we point to the list of GuidebannerElements directly.
  const childArray = children.props.children;
  return <div className={\`\${storyClass}__viewport\`}>
      <Guidebanner {...rest}>{childArray}</Guidebanner>
    </div>;
}`,...(Q=(K=x.parameters)==null?void 0:K.docs)==null?void 0:Q.source}}};const Ze=["collapsible","manyInsights","fewInsights"];export{Ze as __namedExportsOrder,b as collapsible,Ye as default,x as fewInsights,g as manyInsights};
