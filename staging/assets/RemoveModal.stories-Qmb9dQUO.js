import{p as j,j as t,B as b}from"./settings-DrdbGLhD.js";import{r as a}from"./index-BwDkhjyp.js";import{c as Y}from"./deprecate-D9ms-jbM.js";import{S as Z}from"./StoryDocsPage-Gtyvj4mt.js";import{u as ee}from"./index-CVv_11D1.js";import{b as te}from"./story-helper-CKb9Drku.js";import{C as oe,M as ne,a as re,b as se}from"./ComposedModal-BkuB78hp.js";import{T as ae}from"./TextInput-C0l_7R0Q.js";import{P as e}from"./index-Dk74W0Oi.js";import{g as ie}from"./devtools-B_UYo462.js";import{u as pe}from"./uuidv4-BQrI85uz.js";import{u as le}from"./usePortalTarget-BwaChJ5a.js";import{u as me}from"./usePreviousValue-DDnp_zt4.js";import"./_commonjsHelpers-BosuxZz1.js";import"./index-CJvxHwuA.js";import"./events-Bq7WR1mU.js";import"./index-BONylQH5.js";import"./iframe-hL1s_big.js";import"../sb-preview/runtime.js";import"./extends-CCbyfPlC.js";import"./index-C2eUe6cH.js";import"./index-BjQFKvNH.js";import"./isSymbol-BZYRlrjc.js";import"./index-DrFu-skq.js";import"./tslib.es6-CI8bilKU.js";import"./index-DcAOwtUU.js";import"./ButtonSet-CqsYbwZH.js";import"./InlineLoading-DEQVZSgg.js";import"./bucket-5-BuK6y5Rd.js";import"./mergeRefs-CTUecegF.js";import"./requiredIfGivenPropIsTruthy-CU7JwK8h.js";import"./wrapFocus-CuszVIVc.js";import"./index-gKY8typL.js";import"./useNormalizedInputProps-DRpk_7sW.js";import"./Text-_TFgs5hl.js";import"./bucket-17-CArjO86K.js";import"./FormContext-C7kRVu4t.js";import"./bucket-16-C-1D9aPX.js";import"./useAnnouncer-MW4fVOqQ.js";import"./feature-flags-CaJ_YE9P.js";import"./index-DshjxXYm.js";import"./index-CQjTSNrb.js";const h="RemoveModal";let n=a.forwardRef(({body:s,className:c,iconDescription:u,inputInvalidText:f,inputLabelText:m,inputPlaceholderText:$,label:I,onClose:v,onRequestSubmit:L,open:d,portalTarget:E,preventCloseOnClickOutside:F,primaryButtonDisabled:H,primaryButtonText:G,resourceName:U,secondaryButtonText:z,textConfirmation:y,title:C,...A},V)=>{const r=me({open:d}),[R,q]=a.useState(""),J=a.useRef(pe()),K=le(E),Q=X=>{q(X.target.value)},W=H?!0:!!(y&&R!==U),g=`${j.prefix}--remove-modal`;return a.useEffect(()=>{!d&&(r!=null&&r.open)&&q("")},[d,r==null?void 0:r.open]),K(t.jsxs(oe,{...A,className:Y(g,c),size:"sm","aria-label":C,open:d,ref:V,preventCloseOnClickOutside:F,onClose:v,...ie(h),children:[t.jsx(ne,{title:C,label:I,iconDescription:u}),t.jsxs(re,{children:[t.jsx("p",{className:`${g}__body`,children:s}),y&&t.jsx(ae,{id:`${J.current}-confirmation-input`,className:`${g}__input`,invalidText:f,labelText:m,placeholder:$,onChange:Q,value:R,"data-modal-primary-focus":!0})]}),t.jsxs(se,{children:[t.jsx(b,{type:"button",kind:"secondary",onClick:v,"data-modal-primary-focus":!y,children:z}),t.jsx(b,{type:"submit",kind:"danger",onClick:L,disabled:W,children:G})]})]}))});n=j.checkComponentEnabled(n,h);n.propTypes={body:e.string.isRequired,className:e.string,iconDescription:e.string.isRequired,inputInvalidText:e.string,inputLabelText:e.node,inputPlaceholderText:e.string,label:e.string,onClose:e.func,onRequestSubmit:e.func,open:e.bool.isRequired,portalTarget:e.node,preventCloseOnClickOutside:e.bool,primaryButtonDisabled:e.bool,primaryButtonText:e.string,resourceName:e.string.isRequired,secondaryButtonText:e.string,textConfirmation:e.bool,title:e.string.isRequired};n.displayName=h;n.__docgenInfo={description:"",methods:[],displayName:"RemoveModal",props:{body:{required:!0,tsType:{name:"string"},description:"The content to be displayed in the body of the modal",type:{name:"string"}},className:{required:!1,tsType:{name:"string"},description:"Optional classname",type:{name:"string"}},iconDescription:{required:!0,tsType:{name:"string"},description:'Provide a description for "close" icon that can be read by screen readers',type:{name:"string"}},inputInvalidText:{required:!1,tsType:{name:"string"},description:"Message showed when user input fails validation",type:{name:"string"}},inputLabelText:{required:!1,tsType:{name:"ReactNode"},description:"Label for text box",type:{name:"node"}},inputPlaceholderText:{required:!1,tsType:{name:"string"},description:"Placeholder for text box",type:{name:"string"}},label:{required:!1,tsType:{name:"string"},description:"Specify the modal label texts",type:{name:"string"}},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback function that runs when user closes the modal",type:{name:"func"}},onRequestSubmit:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Callback function that runs when user submits the modal",type:{name:"func"}},open:{required:!0,tsType:{name:"boolean"},description:"Specify whether the Modal is currently open",type:{name:"bool"}},portalTarget:{required:!1,tsType:{name:"ReactNode"},description:"The DOM node the tearsheet should be rendered within. Defaults to document.body.",type:{name:"node"}},preventCloseOnClickOutside:{required:!1,tsType:{name:"boolean"},description:"Prevent closing on click outside of modal",type:{name:"bool"}},primaryButtonDisabled:{required:!1,tsType:{name:"boolean"},description:"Specify whether the primary button should be disabled. This value will override textConfirmation",type:{name:"bool"}},primaryButtonText:{required:!1,tsType:{name:"string"},description:"Specify the text for the primary button",type:{name:"string"}},resourceName:{required:!0,tsType:{name:"string"},description:"The name of the resource being acted upon",type:{name:"string"}},secondaryButtonText:{required:!1,tsType:{name:"string"},description:"Specify the text for the secondary button",type:{name:"string"}},textConfirmation:{required:!1,tsType:{name:"boolean"},description:"Specify whether or not to show the text confirmation input",type:{name:"bool"}},title:{required:!0,tsType:{name:"string"},description:"The text displayed at the top of the modal",type:{name:"string"}}}};const _=()=>{const{csfFile:s}=ee("meta",["meta"]);return t.jsx(Z,{altGuidelinesHref:[te(s),{href:"https://www.carbondesignsystem.com/components/modal/usage",label:"Carbon Modal usage guidelines"},{href:"https://react.carbondesignsystem.com/?path=/docs/modal--default",label:"Carbon Modal documentation"}]})};_.__docgenInfo={description:"",methods:[],displayName:"DocsPage"};const et={title:"IBM Products/Patterns/Remove/RemoveModal",component:n,tags:["autodocs"],parameters:{docs:{page:_}},argTypes:{portalTarget:{control:!1}}},o="bx1001",x={body:`Deleting ${o} will permanently delete the configuration. This action cannot be undone.`,className:"remove-modal-test",title:"Confirm delete",iconDescription:"Close",inputInvalidText:"A valid value is required",inputLabelText:`Type ${o} to confirm`,inputPlaceholderText:"Name of resourceName",onClose:()=>!1,open:!0,primaryButtonDisabled:!1,primaryButtonText:"Delete",resourceName:o,secondaryButtonText:"Cancel",label:`Delete ${o}`,preventCloseOnClickOutside:!0},T=({open:s,...c},u)=>{const[f,m]=a.useState(u.viewMode!=="docs"&&s);return t.jsxs(t.Fragment,{children:[t.jsx(n,{...c,open:f,onClose:()=>m(!1)}),t.jsx(b,{onClick:()=>m(!0),children:"Launch modal"})]})},i=T.bind({});i.args={...x,body:`Removing ${o} will permanently remove the configuration. This action cannot be undone.`,title:"Confirm removal",primaryButtonText:"Remove",label:`Remove ${o}`};const p=T.bind({});p.args={...x,body:`Removing ${o} will permanently remove the configuration. This action cannot be undone.`,title:"Confirm removal",primaryButtonText:"Remove",label:`Remove ${o}`,open:!0};const l=T.bind({});l.args={...x,textConfirmation:!0};var O,B,P;i.parameters={...i.parameters,docs:{...(O=i.parameters)==null?void 0:O.docs,source:{originalSource:`({
  open: initOpen,
  ...args
}, context) => {
  const [open, setOpen] = useState(context.viewMode !== 'docs' && initOpen);
  return <>
      <RemoveModal {...args} open={open} onClose={() => setOpen(false)} />
      <Button onClick={() => setOpen(true)}>Launch modal</Button>
    </>;
}`,...(P=(B=i.parameters)==null?void 0:B.docs)==null?void 0:P.source}}};var w,M,D;p.parameters={...p.parameters,docs:{...(w=p.parameters)==null?void 0:w.docs,source:{originalSource:`({
  open: initOpen,
  ...args
}, context) => {
  const [open, setOpen] = useState(context.viewMode !== 'docs' && initOpen);
  return <>
      <RemoveModal {...args} open={open} onClose={() => setOpen(false)} />
      <Button onClick={() => setOpen(true)}>Launch modal</Button>
    </>;
}`,...(D=(M=p.parameters)==null?void 0:M.docs)==null?void 0:D.source}}};var k,S,N;l.parameters={...l.parameters,docs:{...(k=l.parameters)==null?void 0:k.docs,source:{originalSource:`({
  open: initOpen,
  ...args
}, context) => {
  const [open, setOpen] = useState(context.viewMode !== 'docs' && initOpen);
  return <>
      <RemoveModal {...args} open={open} onClose={() => setOpen(false)} />
      <Button onClick={() => setOpen(true)}>Launch modal</Button>
    </>;
}`,...(N=(S=l.parameters)==null?void 0:S.docs)==null?void 0:N.source}}};const tt=["Standard","RemovePattern","DeletePattern"];export{l as DeletePattern,p as RemovePattern,i as Standard,tt as __namedExportsOrder,et as default};
