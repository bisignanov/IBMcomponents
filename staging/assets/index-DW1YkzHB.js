import{j as m}from"./settings-DDDiKwEV.js";import{r as o}from"./index-BwDkhjyp.js";import{P as i}from"./index-Dk74W0Oi.js";import{F as g,c as f}from"./index-DshjxXYm.js";const p=o.createContext(g);function d({children:t,flags:r={}}){const e=o.useContext(p),[a,c]=o.useState(e),[n,u]=o.useState(()=>{const s=f(r);return s.mergeWithScope(e),s});if(e!==a){const s=f(r);s.mergeWithScope(e),u(s),c(e)}return h(r,F,s=>{const l=f(s);l.mergeWithScope(e),u(l)}),m.jsx(p.Provider,{value:n,children:t})}d.propTypes={children:i.node,flags:i.objectOf(i.bool)};function h(t,r,e){const a=o.useRef(!1),c=o.useRef(e),[n,u]=o.useState(t);r(n,t)||u(t),o.useEffect(()=>{c.current=e}),o.useEffect(()=>{a.current&&c.current(n)},[n]),o.useEffect(()=>{a.current=!0},[])}function y(t){return o.useContext(p).enabled(t)}function F(t,r){if(t===r)return!0;for(const e of Object.keys(t))if(t[e]!==r[e])return!1;for(const e of Object.keys(r))if(r[e]!==t[e])return!1;return!0}d.__docgenInfo={description:"Supports an object of feature flag values with the `flags` prop, merging them\nalong with the current `FeatureFlagContext` to provide consumers to check if\na feature flag is enabled or disabled in a given React tree",methods:[],displayName:"FeatureFlags",props:{flags:{defaultValue:{value:"{}",computed:!1},description:"Provide the feature flags to enabled or disabled in the current React tree",type:{name:"objectOf",value:{name:"bool"}},required:!1},children:{description:"",type:{name:"node"},required:!1}}};export{d as F,y as u};
